-- Create Alerts Table (if not exists)
-- This table stores alerts generated by triggers related to suspicious transactions.
IF OBJECT_ID('alertas_transacciones') IS NULL
BEGIN
    CREATE TABLE alertas_transacciones (
        alerta_id INT IDENTITY(1,1) PRIMARY KEY,
        transaction_id INT,
        customer_id VARCHAR(20),
        motivo_alerta VARCHAR(200),
        fecha DATETIME DEFAULT GETDATE()
    );
END;
GO

-- Trigger: High Amount Alert
-- This trigger fires after a new transaction is inserted into the 'transactions' table.
-- If the transaction amount exceeds $5000, an alert is inserted into the 'alertas_transacciones' table.
CREATE OR ALTER TRIGGER trg_alerta_monto_alto
ON transactions
AFTER INSERT
AS
BEGIN
    INSERT INTO alertas_transacciones (transaction_id, customer_id, motivo_alerta)
    SELECT 
        i.transaction_id,
        i.customer_id,
        'Monto superior a $5000'  -- Alert: Transaction amount is higher than $5000
    FROM inserted i
    WHERE i.amount > 5000;
END;
GO

-- Trigger: Fraud Transaction Alert
-- This trigger fires after a new transaction is inserted.
-- If the transaction is marked as fraud (is_fraud = 1), an alert is recorded in the alerts table.
CREATE TRIGGER trg_alerta_fraude
ON transactions
AFTER INSERT
AS
BEGIN
    INSERT INTO alertas_transacciones (transaction_id, customer_id, motivo_alerta)
    SELECT 
        i.transaction_id,
        i.customer_id,
        'Transacción marcada como fraude'  -- Alert: Transaction marked as fraud
    FROM inserted i
    WHERE i.is_fraud = 1;
END;
GO


-- Test Inserts for Trigger Demonstration

-- Test Insert 1: High Amount Transaction
-- This insert should activate the high amount alert trigger.
INSERT INTO transactions (customer_id, step, merchant, category, amount, is_fraud)
VALUES ('C1000148617', 301, 'merchant_alerta_1', 'luxury', 8000, 0);

-- Test Insert 2: Fraudulent Transaction
-- This insert should activate the fraud alert trigger.
INSERT INTO transactions (customer_id, step, merchant, category, amount, is_fraud)
VALUES ('C1000148617', 305, 'merchant_alerta_2', 'electronics', 350, 1);

-- Test Insert 3: High Amount Transaction for the Customer with the Most Transactions
-- This insert selects the customer with the highest number of transactions,
-- then inserts a high amount transaction which should trigger the high amount alert.
INSERT INTO transactions (customer_id, step, merchant, category, amount, is_fraud)
VALUES (
    (SELECT TOP 1 customer_id 
     FROM transactions 
     GROUP BY customer_id 
     ORDER BY COUNT(*) DESC),
    401,
    'merchant_trigger_test_1',
    'luxury',
    9000,
    0
);

-- Test Insert 4: Fraudulent Transaction for the Customer with the Highest Total Spent
-- This insert selects the customer with the highest total transaction amount,
-- then inserts a fraudulent transaction that should trigger the fraud alert.
INSERT INTO transactions (customer_id, step, merchant, category, amount, is_fraud)
VALUES (
    (SELECT TOP 1 customer_id 
     FROM transactions 
     GROUP BY customer_id 
     ORDER BY SUM(amount) DESC),
    405,
    'merchant_trigger_test_2',
    'electronics',
    180,
    1
);

-- Retrieve all alerts to verify the triggers' actions
SELECT * FROM alertas_transacciones
ORDER BY fecha DESC;
